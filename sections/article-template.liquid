{%- liquid
  assign number_of_comments = article.comments_count
  if comment.status == 'pending'
    assign number_of_comments = article.comments_count | plus: 1
  endif
-%}

{%- if section.settings.image_hero and article.image -%}
  <div class="collection-hero">
    {%- assign img_url = article.image | img_url: '1x1' | replace: '_1x1.', '_{width}x.' -%}

    <img class="collection-hero__image image-fit lazyload"
      src=""
      data-src="{{ img_url }}"
      data-aspectratio="{{ article.image.aspect_ratio }}"
      data-sizes="auto"
      alt="{{ article.image.alt | escape }}">
    <noscript>
      <img class="collection-hero__image image-fit"
        src="{{ article.image | img_url: '1400x' }}"
        alt="{{ article.image.alt | escape }}">
    </noscript>

    <div class="collection-hero__content">
      <div class="page-width">
        <header class="section-header section-header--hero">
          <div class="section-header__shadow">
            {%- render 'breadcrumbs' -%}
            {%- if section.settings.blog_show_date or article.tags.size > 0 or articles.comments_count > 0 -%}
              <div class="article__date">
                {%- if section.settings.blog_show_tags and article.tags.size > 0 -%}
                  {%- for tag in article.tags -%}
                    {% if tag contains "_" %}{%- assign tag_starts_with = tag | slice: 0 -%}{% if tag_starts_with == "_" %}{% if tag_count %}{%- assign tag_count = tag_count | minus: 1 | at_least: 0 -%}{% endif %}{% continue %}{% endif %}{% endif %}
                    <a href="{{ blog.url }}/tagged/{{ tag | handle }}">{{ tag }}</a> &middot;
                  {%- endfor -%}
                {%- endif -%}
                {%- if section.settings.blog_show_comments and article.comments_count > 0 -%}
                  <a href="#comments">
                    {{ 'blogs.comments.with_count' | t: count: number_of_comments }}
                  </a> &middot;
                {%- endif -%}
                {%- if section.settings.blog_show_date -%}
                  {{ article.published_at | time_tag: format: 'month_day_year' }}
                {%- endif -%}
              </div>
            {%- endif -%}

            <h1 class="section-header__title">
              {{ article.title }}
            </h1>

            {%- if section.settings.blog_show_author -%}
              <div class="article__author">by {{ article.author }}</div>
            {%- endif -%}
          </div>
        </header>
      </div>
    </div>
  </div>
{%- endif -%}

<div class="page-width page-width--narrow page-content">
  <article class="article">
    {%- unless section.settings.image_hero and article.image -%}
      {%- render 'breadcrumbs' -%}

      <header class="section-header">
        {%- if section.settings.blog_show_date or article.tags.size > 0 or articles.comments_count > 0 -%}
          <div class="article__date">
            {%- if section.settings.blog_show_tags and article.tags.size > 0 -%}
              {%- for tag in article.tags -%}
                {% if tag contains "_" %}{%- assign tag_starts_with = tag | slice: 0 -%}{% if tag_starts_with == "_" %}{% if tag_count %}{%- assign tag_count = tag_count | minus: 1 | at_least: 0 -%}{% endif %}{% continue %}{% endif %}{% endif %}
                <a href="{{ blog.url }}/tagged/{{ tag | handle }}">{{ tag }}</a> &middot;
              {%- endfor -%}
            {%- endif -%}
            {%- if section.settings.blog_show_comments and article.comments_count > 0 -%}
              <a href="#comments">
                {{ 'blogs.comments.with_count' | t: count: number_of_comments }}
              </a> &middot;
            {%- endif -%}
            {%- if section.settings.blog_show_date -%}
              {{ article.published_at | time_tag: format: 'month_day_year' }}
            {%- endif -%}
          </div>
        {%- endif -%}
        <h1 class="section-header__title">{{ article.title }}</h1>
        {%- if section.settings.blog_show_author -%}
          <div class="article__author">by {{ article.author }}</div>
        {%- endif -%}
      </header>
    {%- endunless -%}

   {%- liquid
      assign processed_content = article.content
      assign img_pattern = '<img([^>]+)>'
      assign img_src_pattern = 'src="([^"]+)"'
      assign img_alt_pattern = 'alt="([^"]*)"'
      assign img_width_pattern = 'width="([^"]*)"'
      assign img_height_pattern = 'height="([^"]*)"'
      assign widths = '1,10,360,480,540,720,900,1080,1280'
    -%}

    {%- capture processed_content -%}
      {%- assign content_parts = processed_content | split: '<img' -%}
      {%- for part in content_parts -%}
        {%- if forloop.first -%}
          {{ part }}
        {%- else -%}
          {%- assign img_tag = part | split: '>' | first -%}
          {%- assign img_src = img_tag | split: 'src="' | last | split: '"' | first -%}
          {%- assign img_alt = img_tag | split: 'alt="' | last | split: '"' | first -%}
          {%- assign img_width = img_tag | split: 'width="' | last | split: '"' | first -%}
          {%- assign img_height = img_tag | split: 'height="' | last | split: '"' | first -%}
          
          {%- assign srcset_parts = '' -%}
          {%- assign width_array = widths | split: ',' -%}
          {%- for width in width_array -%}
            {%- assign width = width | strip -%}
            {%- assign sized_url = img_src | append: '&width=' | append: width -%}
            {%- assign srcset_parts = srcset_parts | append: sized_url | append: ' ' | append: width | append: 'w' -%}
            {%- unless forloop.last -%}
              {%- assign srcset_parts = srcset_parts | append: ', ' -%}
            {%- endunless -%}
          {%- endfor -%}

          <img 
            width="1280"
            height="800"
            src="{{ img_src }}&width=1280"
            srcset="{{ srcset_parts }}"
            sizes="(max-width: 768px) calc(100vw - 36px), (max-width: 1024px) 75vw, 854px"
            alt="{{ img_alt }}">
          {{ part | remove_first: img_tag | remove_first: '>' }}
        {%- endif -%}
      {%- endfor -%}
    {%- endcapture -%}


    <div class="article__body rte">
      {% comment %}
        Capture the original article content. Use 'article.content' unless
        your theme specifically uses a pre-processed variable like 'processed_content'.
      {% endcomment %}
      {% assign original_content = processed_content %}
      {% assign contains_youtube = false %}

      {% comment %} Check if the content likely contains a YouTube iframe to process {% endcomment %}
      {% if original_content contains 'youtube.com/embed/' %}

        {% assign contains_youtube = true %}
        {% comment %} Use CDN links for lite-youtube-embed (replace with local assets if preferred) {% endcomment %}
        {% assign lite_youtube_css = 'https://cdn.jsdelivr.net/npm/lite-youtube-embed@0.3.2/src/lite-yt-embed.min.css' %}
        {% assign lite_youtube_js = 'https://cdn.jsdelivr.net/npm/lite-youtube-embed@0.3.2/src/lite-yt-embed.min.js' %}
      
        {% comment %} Output the CSS and JS right before the modified content {% endcomment %}
        {% comment %}{% endcomment %}
        {{ lite_youtube_css | stylesheet_tag }}
        <script src="{{ lite_youtube_js }}" defer></script>
        {% comment %}{% endcomment %}
      
        {% comment %}
          Process the content:
          1. Split the content by the start of the responsive video div.
          2. Iterate through parts. If a part contains a youtube embed iframe:
             - Extract the Video ID.
             - Replace the original iframe structure with <lite-youtube-embed>.
          3. Reconstruct the content.
        {% endcomment %}
        {% assign content_parts = original_content | split: '<div class="responsive-video">' %}
        {% assign modified_content = content_parts[0] %}
      
        {% for i in (1..content_parts.size) %}
          {% assign part = content_parts[i] %}
          {% if part == blank %}{% continue %}{% endif %}
      
          {% comment %} Check if this part contains the YouTube iframe structure {% endcomment %}
          {% if part contains '<iframe' and part contains 'src="https://www.youtube.com/embed/' and part contains '</iframe></div>' %}
      
            {% comment %} Extract the Video ID {% endcomment %}
            {% assign video_id_segment = part | split: 'src="https://www.youtube.com/embed/' | last %}
            {% assign video_id_dirty = video_id_segment | split: '"' | first %}
            {% assign video_id = video_id_dirty | split: '?' | first | split: '&' | first %} {% comment %} Clean up potential query params {% endcomment %}
      
            {% comment %} Find the content *after* the original closing tag {% endcomment %}
            {% assign closing_tag = '</iframe></div>' %}
            {% assign remaining_part = part | split: closing_tag | last %}
      
            {% comment %} Append the lite-youtube component (inside the original wrapper) and the remaining part {% endcomment %}
            {% assign replacement_html = '<div class="responsive-video"><lite-youtube class="yt-lazy-load" style="max-width:100%" videoid="' | append: video_id | append: '"></lite-youtube></div>' %}
            {% assign modified_content = modified_content | append: replacement_html | append: remaining_part %}
      
          {% else %}
            {% comment %} If not a YouTube iframe block, add the wrapper back and the original part {% endcomment %}
            {% assign modified_content = modified_content | append: '<div class="responsive-video">' | append: part %}
          {% endif %}
        {% endfor %}
      
        {% comment %} Output the modified content {% endcomment %}
        {{ modified_content }}
      
      {% else %}
        {% comment %} If no YouTube embeds found, output the original content directly {% endcomment %}
        {% comment %}{{ article.content }}{% endcomment %}
        {{ original_content }}
      {% endif %}
    </div>

{% comment %} If YouTube videos were processed, add the Intersection Observer script {% endcomment %}
{% comment %}
{% if contains_youtube %}
<script>
  function loadLiteYouTubeAssets() {
    console.log('  loadLiteYouTubeAssets 000');
    // Check if assets are already loaded or loading
    if (window.liteYouTubeAssetsLoaded) {
      return;
    }
    window.liteYouTubeAssetsLoaded = true; // Set flag immediately

    console.log('  Loading Lite YouTube Embed assets...');

    // Create and append the CSS link tag
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.href = '{{ lite_youtube_css_url }}'; // Use Liquid variable for URL
    document.head.appendChild(link);

    // Create and append the JS script tag
    const script = document.createElement('script');
    script.src = '{{ lite_youtube_js_url }}'; // Use Liquid variable for URL
    script.defer = true; // Defer execution until HTML parsing is complete
    document.body.appendChild(script); // Append to body is generally fine
  }

  // Use Intersection Observer to load assets when a video is near viewport
  document.addEventListener('DOMContentLoaded', () => {
    const lazyYouTubeVideos = document.querySelectorAll('.responsive-video,.article__body lite-youtube.yt-lazy-load');
          console.log('  lazyYouTubeVideos',lazyYouTubeVideos);

    if (lazyYouTubeVideos.length > 0) {
      let obs; // Declare observer variable
               console.log('   lazyYouTubeVideos.length',lazyYouTubeVideos.length);

      const obsCallback = (entries, obs) => {
        entries.forEach(entry => {
          // If the element is intersecting (visible or about to be)
          if (entry.isIntersecting) {
               console.log('      isIntersecting',entry);
            // Load assets (function ensures it only runs once)
            loadLiteYouTubeAssets();
            // Assets are loading/loaded, we don't need the observer anymore
            // Disconnect the observer to stop watching all elements
             if (obs) { // Ensure observer exists before disconnecting
               obs.disconnect();
               console.log('Lite YouTube observer disconnected.');
             }
          }
        });
      };

      // Observer options: rootMargin expands the "trigger zone" by 500px top/bottom
      const obsOptions = {
        root: null, // relative to the viewport
        rootMargin: '500px',
      };

      // Create and assign the observer
      obs = new IntersectionObserver(obsCallback, obsOptions);

      // Start observing each lazy video element
      lazyYouTubeVideos.forEach(video => {
        obs.observe(video);
      });
    }
  });
</script>
{% endif %}
{% endcomment %}


    {%- if section.settings.social_sharing_blog -%}
      {%- render 'social-sharing', share_title: article.title, share_permalink: article.url, share_image: article.image -%}
    {%- endif -%}

    {%- if blog.comments_enabled? -%}

      {%- if number_of_comments > 0 -%}
        <hr class="hr--large">
        <h3>{{ 'blogs.comments.with_count' | t: count: number_of_comments }}</h3>
        <hr class="hr--small hr--clear">
      {%- endif -%}

      {%- paginate article.comments by 5 -%}
        <div id="comments">
          {%- if comment and comment.errors == blank -%}
            <hr class="hr--small hr--clear">
            <p class="note note--success">
              {%- if blog.moderated? -%}
                {{ 'blogs.comments.success_moderated' | t }}
              {%- else -%}
                {{ 'blogs.comments.success' | t }}
              {%- endif -%}
            </p>
          {%- endif -%}

          {%- if number_of_comments > 0 -%}
            <ul class="no-bullets">
              {%- if comment.status == 'pending' -%}
                <li id="Comment-{{ comment.id }}" class="article__comment">
                  {%- render 'comment', comment: comment -%}
                </li>
              {%- endif -%}

              {%- for comment in article.comments -%}
                <li id="Comment-{{ comment.id }}" class="article__comment">
                  {%- render 'comment', comment: comment -%}
                </li>

                {%- unless forloop.last -%}
                  <li><hr class="hr--clear"></li>
                {%- endunless -%}
              {%- endfor -%}
            </ul>

            {%- if paginate.pages > 1 -%}
              {%- render 'pagination', paginate: paginate, hash: '#comments' -%}
            {%- endif -%}

          {%- endif -%}

          <hr class="hr--large">

          <header class="section-header{% unless settings.type_headers_align_text %} section-header--with-link{% endunless %}">
            <h3 class="section-header__title">{{ 'blogs.comments.title' | t }}</h3>
          </header>

          <div class="form-vertical">
            {%- form 'new_comment', article -%}

              {{ form.errors | default_errors }}

              <div class="grid grid--small">
                <div class="grid__item medium-up--one-half">
                  <label for="CommentAuthor">{{ 'blogs.comments.name' | t }}</label>
                  <input class="input-full{% if form.errors contains 'author' %} error{% endif %}" type="text" name="comment[author]" id="CommentAuthor" value="{{ form.author }}" autocapitalize="words">
                </div>
                <div class="grid__item medium-up--one-half">
                  <label for="CommentEmail">{{ 'blogs.comments.email' | t }}</label>
                  <input class="input-full{% if form.errors contains 'email' %} error{% endif %}" type="email" name="comment[email]" id="CommentEmail" value="{{ form.email }}" autocorrect="off" autocapitalize="off">
                </div>
              </div>

              <label for="CommentBody">{{ 'blogs.comments.message' | t }}</label>
              <textarea class="input-full{% if form.errors contains 'body' %} error{% endif %}" name="comment[body]" id="CommentBody">{{ form.body }}</textarea>

              {%- if blog.moderated? -%}
                <p><small>{{ 'blogs.comments.moderated' | t }}</small></p>
              {%- endif -%}

              <button type="submit" class="btn btn--secondary">
                {{ 'blogs.comments.post' | t }}
              </button>

              {% comment %}
                Remove the following three lines of code to remove the note
                about being protected by Google's reCAPTCHA service.
                By removing it, the small reCAPTCHA widget will appear in the
                bottom right corner of the page.
              {% endcomment %}
              {{ 'shopify.online_store.spam_detection.disclaimer_html' | t }}

            {%- endform -%}
          </div>

        </div>
      {%- endpaginate -%}
    {%- endif -%}

    <hr class="hr--large">

  </article>

  <div class="text-center">
    <a href="{{ blog.url }}" class="btn return-link"><svg aria-hidden="true" focusable="false" role="presentation" class="icon icon--wide icon-arrow-left" viewBox="0 0 50 15"><path d="M50 5.38v4.25H15V15L0 7.5 15 0v5.38z"/></svg> {{ 'blogs.article.back_to_blog' | t: title: blog.title }}</a>
  </div>
</div>

<script type="application/ld+json">
{
  "@context": "http://schema.org",
  "@type": "Article",
  "articleBody": {{ article.content | strip_html | json }},
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": {{ shop.url | append: article.url | json }}
  },
  "headline": {{ article.title | json }},
  {% if article.excerpt != blank %}
    "description": {{ article.excerpt | strip_html | json }},
  {% endif %}
  {% if article.image %}
    {% assign image_size = article.image.width | append: 'x' %}
    "image": [
      {{ article | img_url: image_size | prepend: "https:" | json }}
    ],
  {% endif %}
  "datePublished": {{ article.published_at | date: '%Y-%m-%dT%H:%M:%SZ' | json }},
  "dateModified": {{ article.updated_at | date: '%Y-%m-%dT%H:%M:%SZ' | json }},
  "dateCreated": {{ article.created_at | date: '%Y-%m-%dT%H:%M:%SZ' | json }},
  "author": {
    "@type": "Person",
    "name": {{ article.author | json }}
  },
  "publisher": {
    "@type": "Organization",
    {% if page_image %}
      {% assign image_size = page_image.width | append: 'x' %}
      "logo": {
        "@type": "ImageObject",
        "height": {{ page_image.height | json }},
        "url": {{ page_image | img_url: image_size | prepend: "https:" | json }},
        "width": {{ page_image.width | json }}
      },
    {% endif %}
    "name": {{ shop.name | json }}
  }
}
</script>

{% schema %}
  {
    "name": "Article pages",
    "settings": [
      {
        "type": "checkbox",
        "id": "image_hero",
        "label": "Use featured image as full-width hero",
        "info": "(if article image is set)",
        "default": false
      },
      {
        "type": "checkbox",
        "id": "blog_show_tags",
        "label": "Show tags",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "blog_show_date",
        "label": "Show date",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "blog_show_comments",
        "label": "Show comment count",
        "default": true
      },
      {
        "type": "checkbox",
        "id": "blog_show_author",
        "label": "Show author"
      },
      {
        "type": "checkbox",
        "id": "social_sharing_blog",
        "label": "Show social sharing buttons",
        "default": true
      }
    ]
  }
{% endschema %}
