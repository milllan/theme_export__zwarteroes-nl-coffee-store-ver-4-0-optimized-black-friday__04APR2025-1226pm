<!-- Free shipping progress markup -->

  {% assign hasHandle = "false" %}
{% for item in cart.items %}
  {% if item.product.handle contains "blbabl" %}
    {% assign hasHandle = "true" %}
    {% endif %}
  {% endfor %}

  {% if hasHandle == "true" %}
    {% assign percentageProgress = 100 %}
    {% assign awayPrice = -1  %}
  {% else %}
    {% assign percentageProgress = cart.total_price | times: 100 | divided_by: settings.free_shipping_thresold %}
    {% assign awayPrice = settings.free_shipping_thresold | minus:cart.total_price  %}
  {% endif %}

<div class="cart-shipping__wrapper">
  {% if awayPrice > 0 %}
  <p class="cart-shipping__numOuter">Je bent <span class="cart-shipping__num">{{ awayPrice | money }}</span> verwijderd van <b>gratis verzending!</b></p>
  {% else %}<p class="cart-shipping__success">Yes! Je pakket wordt gratis verzonden!</p>
  {% endif %}

 
  
  <div class="cart-shippingThreshold__bar">
    <span class="cart-shippingThreshold__progress" style="width:{{ percentageProgress }}%"></span>
  </div>
</div>

<style>
/*  Style the progress bar  */
.cart-shipping__wrapper {
  padding: 15px;
  max-width: 700px;
  margin: 0 auto;
}

.cart-shippingThreshold__bar {
  position: relative;
  /*  Progress bar background color  */
  background-color: #d8d8d8;
  height: 1rem;
}

.cart-shippingThreshold__progress {
  position: absolute;
  top: 0;
  left: 0;
  min-width: 0;
  max-width: 100%;
  height: 100%;
  display: block;
  /*  Progress bar fill color  */
  background-color: var(--colorNav); 
}
</style>

<script defer>
// Calculate the progress number, and the width of the progress bar.
function calculateProgress(cart,currentVal, targetVal) {
  var progressBar = document.querySelectorAll('.cart-shippingThreshold__progress');
  var progressNum = document.querySelectorAll('.cart-shipping__num');
  var progressOuter = document.querySelectorAll('.cart-shipping__numOuter');
  var successMsg = document.querySelectorAll('.cart-shipping__success');
  // calculate how far progress is from the total as a percentage
  var result = Math.round(100 * currentVal / targetVal);

  var newProgressNum = (targetVal - currentVal) / 100;
  var hasHandle = "blabla"

  cart.items.forEach(item=>{
    if(item.handle == "blabla"){
      hasHandle = true
        }
  })


  
  if(hasHandle){
    result = 100;
    newProgressNum =-1;
  }
                                               
  progressBar.forEach(function(el){
    el.setAttribute('style', "width: ".concat(result, "%"));
  })
   // Update the progess text. If threshold is met, show success message
  if(newProgressNum <= 0){
    successMsg.forEach(function(el){
      el.style.display = 'block';
    });
    progressOuter.forEach(function(el){
      el.style.display = 'none';
    });
    progressNum.forEach(function(el){
      el.textContent = newProgressNum;
    });
  } else {
    successMsg.forEach(function(el){
      el.style.display = 'none';
    });
    progressOuter.forEach(function(el){
      el.style.display = 'block';
    });
    progressNum.forEach(function(el){
      el.textContent = newProgressNum;
    });
  }
};

// In your theme's main JS file, find each ajax call where your store adds to, deletes from, and updates the cart. Put this in the success function of each. 
// NOTE: If you make this ajax request outside of the functions that update the cart, the calculator won't sync with the current cart state without refreshing the page. You need to specify that you want to read the current cart data AFTER the new items are added/removed.
 const getProgrssBar = () =>{
   fetch('/cart.js')
    .then(response => response.json())
    .then(data => {
      console.log(data)
      calculateProgress(data,data.total_price, 7900);
    });
}

  getProgrssBar();

  document.addEventListener("cart:updated", function() {
                   getProgrssBar()
                })
  
</script>